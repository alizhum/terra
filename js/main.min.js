const counters = document.querySelectorAll('.counter-item');
const speed = 100;
const tabButtons = document.querySelectorAll('.tab__button');
const abroadAddress = document.querySelectorAll('.abroad__address-tag');
const abroadAddressClose = document.querySelectorAll('.abroad__address-box-close');
const faqItems = document.querySelectorAll('.faq__item-toggle');
const introSlider = new Swiper('.intro__slider', {
  slidesPerView: 'auto',
  spaceBetween: 20,

});

const gallerySlider = new Swiper('.gallery__slider', {
  slidesPerView: 'auto',
  spaceBetween: 20,
  watchOverflow: true,
  centeredSlides: true,
  initialSlide: 1,
  on: { 
    slideChange: function() {
      
      let slideCurrentIndex = this.realIndex;
      let currSlide = this.el.swiper.slides[slideCurrentIndex];

      if( this.el.closest('.gallery__slider').querySelector('.gallery__slider-caption') ) {
        if( currSlide.hasAttribute('data-caption') ) {

          this.el.closest('.gallery__slider').querySelector('.gallery__slider-caption').innerText = currSlide.dataset.caption;
  
        }
      }

    }
  }
});




counters.forEach( counter => {
   const animate = () => {
      const value = +counter.dataset.number;
      const data = +counter.innerText;
     
      const time = value / speed;
     if(data < value) {
          counter.innerText = Math.ceil(data + time);
          setTimeout(animate, 1);
        }else{
          counter.innerText = value;
        }
     
   }
   
   animate();
});

if( tabButtons ) {

  tabButtons.forEach(function(button) {

    button.addEventListener('click', function() {

      if( this.classList.contains('tab__button--active') ) return;

      const tab = this.closest('.tab');
      const contentID = this.dataset.content;
      const activeContent = tab.querySelector('.tab__content--active');
      const activeButton = tab.querySelector('.tab__button--active');
      const contentToActive = document.getElementById(contentID);
      

      if( contentToActive ) {

        activeContent.classList.remove('tab__content--active');
        activeButton.classList.remove('tab__button--active');
  
        this.classList.add('tab__button--active');
        contentToActive.classList.add('tab__content--active');

      }

    });
  });

}


if( abroadAddress ) {
  abroadAddress.forEach((item) => {
    
    item.addEventListener('click', function() {
      
      const parent = this.closest('.abroad__address-item');

      if( !parent.querySelector('.abroad__address-box') ) return;

      const openItems = document.querySelectorAll('.abroad__address-box--active');
      openItems.forEach((openItem) => {
        if (openItem.parentElement !== parent) {
          openItem.classList.remove('abroad__address-box--active');
          openItem.previousElementSibling.classList.remove('abroad__address-tag--active');
        }
      });

      parent.querySelector('.abroad__address-box').classList.toggle('abroad__address-box--active');
      this.classList.toggle('abroad__address-tag--active');

    });

  });

  abroadAddressClose.forEach((item) => {

    item.addEventListener('click', function() {

      this.closest('.abroad__address-item').querySelector('.abroad__address-tag').click();

    });

  });

}



if( faqItems ) {

  faqItems.forEach(function(item) {
    item.addEventListener('click', function(e) {

      e.preventDefault();

      const container = this.closest('.faq');
      const otherItems = container.querySelectorAll('.faq__item--active');
      const parent = this.closest('.faq__item');
      
      parent.classList.toggle('faq__item--active');
      parent.querySelector('.faq__item-content').slideToggle(300);

      if( otherItems ) {
        otherItems.forEach(function(elem) {
          elem.querySelector('.faq__item-content').slideToggle(300);
          elem.classList.remove('faq__item--active');
        });
      }


    });
  });

}


// Slide Toggle Vanilla JS
HTMLElement.prototype.slideToggle = function(duration, callback) {
  if (this.clientHeight === 0) {
    _s(this, duration, callback, true);
  } else {
    _s(this, duration, callback);
  }
};

function _s(el, duration, callback, isDown) {
  
  if (typeof duration === 'undefined') duration = 400;
  if (typeof isDown === 'undefined') isDown = false;

  el.style.overflow = "hidden";
  if (isDown) el.style.display = "block";

  var elStyles        = window.getComputedStyle(el);

  var elHeight        = parseFloat(elStyles.getPropertyValue('height'));
  var elPaddingTop    = parseFloat(elStyles.getPropertyValue('padding-top'));
  var elPaddingBottom = parseFloat(elStyles.getPropertyValue('padding-bottom'));
  var elMarginTop     = parseFloat(elStyles.getPropertyValue('margin-top'));
  var elMarginBottom  = parseFloat(elStyles.getPropertyValue('margin-bottom'));

  var stepHeight        = elHeight        / duration;
  var stepPaddingTop    = elPaddingTop    / duration;
  var stepPaddingBottom = elPaddingBottom / duration;
  var stepMarginTop     = elMarginTop     / duration;
  var stepMarginBottom  = elMarginBottom  / duration;

  var start;

  function step(timestamp) {

    if (start === undefined) start = timestamp;

    var elapsed = timestamp - start;

    if (isDown) {
      el.style.height        = (stepHeight        * elapsed) + "px";
      el.style.paddingTop    = (stepPaddingTop    * elapsed) + "px";
      el.style.paddingBottom = (stepPaddingBottom * elapsed) + "px";
      el.style.marginTop     = (stepMarginTop     * elapsed) + "px";
      el.style.marginBottom  = (stepMarginBottom  * elapsed) + "px";
    } else {
      el.style.height        = elHeight        - (stepHeight        * elapsed) + "px";
      el.style.paddingTop    = elPaddingTop    - (stepPaddingTop    * elapsed) + "px";
      el.style.paddingBottom = elPaddingBottom - (stepPaddingBottom * elapsed) + "px";
      el.style.marginTop     = elMarginTop     - (stepMarginTop     * elapsed) + "px";
      el.style.marginBottom  = elMarginBottom  - (stepMarginBottom  * elapsed) + "px";
    }

    if (elapsed >= duration) {
      el.style.height        = "";
      el.style.paddingTop    = "";
      el.style.paddingBottom = "";
      el.style.marginTop     = "";
      el.style.marginBottom  = "";
      el.style.overflow      = "";
      if (!isDown) el.style.display = "none";
      if (typeof callback === 'function') callback();
    } else {
      window.requestAnimationFrame(step);
    }
  }

  window.requestAnimationFrame(step);
}
